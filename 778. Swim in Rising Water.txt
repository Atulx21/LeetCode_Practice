class Solution {
public:
    bool dfs(vector<vector<int>> &grid, vector<vector<int>> &vis, int mid, int row, int col) {
        int m = grid.size();
        int n = grid[0].size();

        if (row == m - 1 && col == n - 1) return true;
        vis[row][col] = 1;

        int d1[4] = {-1, 0, 1, 0};
        int d2[4] = {0, 1, 0, -1};

        for (int i = 0; i < 4; i++) {
            int nrow = row + d1[i];
            int ncol = col + d2[i];
            if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n 
                && vis[nrow][ncol] == 0 && grid[nrow][ncol] <= mid) {
                if (dfs(grid, vis, mid, nrow, ncol)) return true;
            }
        }
        return false;
    }

    int swimInWater(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int high = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                high = max(high, grid[i][j]);
            }
        }

        int low = 0;
        int answer = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            vector<vector<int>> vis(m, vector<int>(n, 0));
            if (grid[0][0] <= mid && dfs(grid, vis, mid, 0, 0)) {
                answer = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return answer;
    }
};




Example :
Input: grid = [[0,2],[1,3]]
Output: 3

Input: grid = [[3,2],[0,1]]
Output: 3

Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
