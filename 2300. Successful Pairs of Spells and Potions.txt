class Solution {
public:
    vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {
        int n = spells.size();
        int m = potions.size();
        vector<int> result(n, 0);
        sort(potions.begin(), potions.end());
        for (int i = 0; i < n; ++i) {
            long long required = (success + spells[i] - 1) / spells[i];  
            int idx = lower_bound(potions.begin(), potions.end(), required) - potions.begin();
            result[i] = m - idx;
        }
        return result;
    }
};









Example 1:
Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]

Example 2:
Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]