class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        backtrack(nums, 0, result);
        return result;
    }
    
    void backtrack(vector<int>& nums, int start, vector<vector<int>>& result) {
        if (start == nums.size()) {
            result.push_back(nums);
            return;
        }
        for (int i = start; i < nums.size(); ++i) {
            swap(nums[start], nums[i]);
            backtrack(nums, start + 1, result);
            swap(nums[start], nums[i]); // backtrack
        }
    }
};

// Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.



// Using STL 
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int>> permute(vector<int> nums) {
    sort(nums.begin(), nums.end());
    vector<vector<int>> result;
    do {
        result.push_back(nums);
    } while (next_permutation(nums.begin(), nums.end()));
    return result;
}

