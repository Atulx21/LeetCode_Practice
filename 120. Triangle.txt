class Solution {
public:
    int mini = INT_MAX;

    int solve(vector<vector<int>>& triangle, int ind, int col, vector<vector<int>> &dp) {
        if (ind == triangle.size()) 
            return 0;

        if (dp[ind][col] != -1) 
            return dp[ind][col];

        int left = solve(triangle, ind + 1, col, dp);
        int right = solve(triangle, ind + 1, col + 1, dp);

        return dp[ind][col] = triangle[ind][col] + min(left, right);
    }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        return solve(triangle, 0, 0, dp);
    }
};




//Optimise 
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
         int n = triangle.size();
        vector<int> dp = triangle.back();  

        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1]);
            }
        }
        return dp[0];
    }
};


Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).