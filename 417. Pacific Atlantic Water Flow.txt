class Solution {
public:
    void dfs(vector<vector<int>>& heights, vector<vector<int>>& ocean, int row, int col) {
        int m = heights.size();
        int n = heights[0].size();
        int d1[4] = {-1, 0, 1, 0};
        int d2[4] = {0, 1, 0, -1};
        ocean[row][col] = 1;
        for (int i = 0; i < 4; i++) {
            int nrow = row + d1[i];
            int ncol = col + d2[i];
            if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n 
                && ocean[nrow][ncol] == 0 
                && heights[nrow][ncol] >= heights[row][col]) {
                dfs(heights, ocean, nrow, ncol);
            }
        } 
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> pacific(m, vector<int>(n, 0));
        vector<vector<int>> atlantic(m, vector<int>(n, 0));
        vector<vector<int>> ans;

        for (int i = 0; i < n; i++) {
            dfs(heights, pacific, 0, i);
        }
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0);
        }
        for (int i = m - 1; i >= 0; i--) {
            dfs(heights, atlantic, i, n - 1);
        }
        for (int i = n - 1; i >= 0; i--) {
            dfs(heights, atlantic, m - 1, i);
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] == 1 && atlantic[i][j] == 1) {
                    ans.push_back({i, j});
                }
            }
        }
        return ans;
    }
};




Example :
Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]