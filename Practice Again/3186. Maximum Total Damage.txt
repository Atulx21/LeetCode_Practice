class Solution {
public:
    long long maximumTotalDamage(vector<int>& power) {
        unordered_map<int, long long> freq;
        for (int v : power) freq[v] += v;

        vector<int> uniqueVals;
        for (auto& p : freq) uniqueVals.push_back(p.first);
        sort(uniqueVals.begin(), uniqueVals.end());

        int n = uniqueVals.size();
        vector<long long> dp(n, 0);

        for (int i = 0; i < n; ++i) {
            long long gain = freq[uniqueVals[i]];
            int j = i - 1;
             while (j >= 0 && uniqueVals[j] > uniqueVals[i] - 3) j--;

            long long prevDP = (j >= 0) ? dp[j] : 0;
            long long take = gain + prevDP;
            long long skip = (i > 0) ? dp[i-1] : 0;
            dp[i] = max(take, skip);
        }
        return dp.back();
    }
};







Example 1:
Input: power = [1,1,3,4]
Output: 6

Example 2:
Input: power = [7,1,6,6]
Output: 13