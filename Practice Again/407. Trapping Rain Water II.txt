class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m = heightMap.size(), n = heightMap[0].size();
    if (m < 3 || n < 3) return 0;  

    priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
    vector<vector<bool>> visited(m, vector<bool>(n, false));

    for (int i = 0; i < m; ++i) {
        pq.push({heightMap[i][0], i, 0}); visited[i][0] = true;
        pq.push({heightMap[i][n-1], i, n-1}); visited[i][n-1] = true;
    }
    for (int j = 1; j < n-1; ++j) {
        pq.push({heightMap[0][j], 0, j}); visited[0][j] = true;
        pq.push({heightMap[m-1][j], m-1, j}); visited[m-1][j] = true;
    }

    int trapped = 0;
    int dirs[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
    while (!pq.empty()) {
        auto cell = pq.top(); pq.pop();
        int h = cell[0], x = cell[1], y = cell[2];
        for (auto& d : dirs) {
            int nx = x + d[0], ny = y + d[1];
            if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny]) continue;
            trapped += max(0, h - heightMap[nx][ny]);
            pq.push({max(heightMap[nx][ny], h), nx, ny});
            visited[nx][ny] = true;
        }
    }
    return trapped; 
    }
};






Example 1 :
Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4

Example 2 :
Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10