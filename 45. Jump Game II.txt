class Solution {
public:
    int helper (vector<int>& nums, int ind){
        if(ind>=nums.size()-1) return 0;

        int mini=INT_MAX;
        for(int i=1;i<=nums[ind];i++){
            int jumps=helper(nums,ind + i);
            if(jumps!=INT_MAX)
            mini=min(mini,jumps+1);
        }
        return mini;
    }
    int jump(vector<int>& nums) {
        return helper(nums,0);
    }
};



// using DP (Optimized)

class Solution {
public:
    int helper (vector<int>& nums, int ind , vector<int>& dp){
        if(ind>=nums.size()-1) return 0;
        if(dp[ind]!=-1) return dp[ind];

        int mini=INT_MAX;
        for(int i=1;i<=nums[ind];i++){
            int jumps=helper(nums,ind + i,dp);
            if(jumps!=INT_MAX)
            mini=min(mini,jumps+1);
        }
        return dp[ind]=mini;
    }
    int jump(vector<int>& nums) {
        vector<int>dp (nums.size(),-1);
        return helper(nums,0,dp);
    }
};