class Solution {
public:
    bool dfs(vector<vector<char>>& board, vector<vector<int>> &vis, string& word, int indx, int row, int col) {
        int m = board.size();
        int n = board[0].size();
        if (indx == word.size()) return true;
        
        vis[row][col] = 1;
        char ch = word[indx];
        
        int d1[4] = {-1, 0, 1, 0};
        int d2[4] = {0, 1, 0, -1};
        for (int k = 0; k < 4; k++) {
            int nrow = row + d1[k];
            int ncol = col + d2[k];
            if (nrow >= 0 && nrow < m && ncol >= 0 && ncol < n && !vis[nrow][ncol] && board[nrow][ncol] == ch) {
                if (dfs(board, vis, word, indx + 1, nrow, ncol)) return true;
            }
        }
        
        vis[row][col] = 0;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        
         unordered_map<char, int> freqBoard, freqWord;
        for (auto& row : board) {
            for (char c : row) {
                freqBoard[c]++;
            }
        }
        for (char c : word) {
            freqWord[c]++;
        }
        for (auto& p : freqWord) {
            if (freqBoard[p.first] < p.second) return false;  
        }
        
        char ch = word[0];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == ch) {
                    vis[i][j] = 1;
                    if (dfs(board, vis, word, 1, i, j)) return true;
                    vis[i][j] = 0;
                }
            }
        }
        
        return false;
    }
};




Example :
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true

Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true